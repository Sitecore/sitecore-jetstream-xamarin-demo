// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using JetStreamCommons.Destinations;
using SDWebImage;
using CoreGraphics;

namespace JetStreamIOSFull
{
  public partial class DestinationDetailsViewController : BaseViewController
	{
    private IDestination destination;
    
		public DestinationDetailsViewController (IntPtr handle) : base (handle)
		{
		}

    public void ShowDestinationDetails(IDestination destination)
    {
      if (destination == null)
      {
        throw new NullReferenceException("Destination must not be null");
      }
      this.destination = destination;
    }

    public override void ViewWillAppear(bool animated)
    {
      base.ViewWillAppear(animated);

      this.FillScreesnWithDestinationInfo(this.destination);
    }

    private void FillScreesnWithDestinationInfo(IDestination destination)
    {
      this.TitleLabel.Text = destination.DisplayName;

      this.DownloadAndShowDestinationImage(destination);

      nfloat border = 10;
      nfloat width = this.DestinationImageView.Bounds.Width + border;
      nfloat height = this.DestinationImageView.Bounds.Height - this.TitleLabel.Frame.Height;
      CGRect rect = new CGRect(0, 0, width, height);
      UIBezierPath imgRect = UIBezierPath.FromRect(rect);
      UIBezierPath[] paths = new UIBezierPath[] { imgRect };
      this.DestinationDescription.TextContainer.ExclusionPaths = paths;

      string clearedText = destination.Overview.Replace(System.Environment.NewLine, " ");
      this.DestinationDescription.Text = clearedText;
      this.DestinationDescription.Font = UIFont.SystemFontOfSize(18);
      this.DestinationDescription.TextAlignment = UITextAlignment.Justified;
    }

    private void DownloadAndShowDestinationImage(IDestination destination)
    {
      string imagePath = String.Concat(this.Endpoint.InstanceUrl, this.destination.ImagePath);

      NSUrl imageUrl = new NSUrl(imagePath);

      SDWebImageDownloader.SharedDownloader.DownloadImage(
        url: imageUrl,
        options: SDWebImageDownloaderOptions.LowPriority,
        progressHandler: (receivedSize, expectedSize) =>
      {
        // Track progress...
      },
        completedHandler: (image, data, error, finished) =>
      {
        if (image != null)
        {
          InvokeOnMainThread(() =>
          {
            this.DestinationImageView.Image = image;
          });
        }
      }
      );
    }
	}
}
